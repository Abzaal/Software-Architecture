name: CI/CD Workflow

  # Workflow triggers
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

  # Environment Variables
env:
  DOCKER_IMAGE_NAME: lowercase-image-name
  PROJECT_NAME: ProjectName
  GROUP_NUMBER: GroupNumber #I.e  Group02 

jobs:
  # Job for creating an artifact of repository source code to use for consistensy accross all jobs
  clone-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.0.0

      - name: Upload Repository artifacts
        uses: actions/upload-artifact@v3
        with:
          name: repository-artifacts
          path: .

  # Job for performing linting and/or other static code analysis
  linting:
    runs-on: ubuntu-latest
    needs: clone-repository
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
        # Install tools needed for static code analysis depending on programming language
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y 
          echo "install your linter & code analysis tools of choice"
      - name: Linter
        run: echo "run linter"
      - name: Code Analysis
        run: echo "run code analysis"
  
  # Job for building compiled applicaitons and upload a build artifact
  build-application:
    runs-on: ubuntu-latest
    needs: clone-repository
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      # Logic for building the applicaiton
      - name: Build application
        run:  echo "build app"

      # Upload created applicaiton artifact
      - name: Upload Build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: . #REPLACE WITH PATH TO BUILD ARTIFACT IF ANY
  
  # Job for testing the application i.e 
  test-application:
    runs-on: ubuntu-latest
    needs: [build-application,linting]
    # Allow pipeline to continue on error
    continue-on-error: true
    steps:
      # Download build artifact and use for applicaiton tests
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: ./build
      - name: Test application
        run: echo "test"

  build-push-docker-image:
    runs-on: ubuntu-latest
    needs: [test-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          # Using GitHub Registry, could be changed dockerhub
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Building and pushing application image go to: GitHub -> Profile -> Packages 
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          # Specify path to DockerFile
          context: .
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ env.DOCKER_IMAGE_NAME }}:1.0-${{ github.sha }},ghcr.io/${{ github.actor }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  # Job for deploying the application i.e to VM  
  deploy-application:
    runs-on: ubuntu-latest
    needs: [build-push-docker-image]
    continue-on-error: true
    steps:
      - name: Logic for deploying application
        run: echo "deploy app"